1.Extract the middle 3 characters from the string 'ABCDEFG'.

  select SUBSTRING ('ABCDEFG',3,3);


2.From a table 'Employees' with a column 'FullName', write a query to extract the first name (assuming it's always the first word before a space).
  
  Alter table employees add fullName varchar (50);
  update employees set fullName = firstName+' '+LastName;
  select substring( fullName,1,Charindex(' ',fullName)-1 ) from employees;


3.Extract the first 5 characters from the string 'SQL Server 2022'.
  
  select substring('SQL Server 2022',1,5);


4.From a 'Products' table with a 'ProductCode' column, write a query to get the first 3 characters of each product code.
  
  select substring(ProductCode,1,3) from Products;

5.Extract the last 4 characters from the string 'ABCDEFGHIJKL'.
  
   select Right('ABCDEFGHIJKL',4)


6.From an 'Orders' table with an 'OrderID' column (format: ORD-YYYY-NNNN), write a query to extract just the numeric portion at the end.

  select RIght(orderID, 4) from Orders


7.Write a query to find the length of the string 'SQL Server Functions'.
  
  select LEN('SQL Server Functions');


8.From a 'Customers' table, find customers whose names are longer than 20 characters.

  select customerName from Customers where length(Customers) > 20


9.Compare the results of character count and byte count for the string 'SQL Server' with a trailing space.

  SELECT LEN('SQL Server ') AS VarcharLen, LEN(N'SQL Server ') AS NVarcharLen;


10.Write a query to find the byte count of an empty string and explain the result.
 
  select DATALENGTH('') as bytecount

  The byte count of an empty string ('' or N'') is 0 in MS SQL Server because the DATALENGTH() function measures only the space used by the actual string content  in variable-length fields (like VARCHAR or NVARCHAR).
  Since an empty string contains no characters, zero bytes of storage are required to hold the data itself; the function deliberately excludes the minor internal overhead SQL Server uses to track that the string has a length of zero.


11.Find the position of 'Server' in the string 'Microsoft SQL Server'.

  select charindex('Server','Microsoft SQL Server') as position


12.From an 'Emails' table, write a query to extract the domain name from email addresses.

  select substring(email,CHARINDEX('@',email)+1,len(email)) from employees


13.Find the position of the first number in the string 'ABC123DEF456'.

  select patindex('%[0-9]%','ABC123DEF456') as position


14.Write a query to find all product names from a 'Products' table that contain a number.

  select productName from Products where productName like '%[0-9]%'


15.Join the strings 'SQL', 'Server', and '2022' with spaces between them.

  select concat('SQL',' ','Server',' ','2022')


16.From 'Employees' table with 'FirstName' and 'LastName' columns, create a 'FullName' column.

  select firstName,lastName,concat(firstName,' ',lastName) as fullName from employees


17.Join the array ('SQL', 'Server', '2022') with a hyphen as the separator.

  select CONCAT_WS('-','SQL','Server','2022')


18.From an 'Addresses' table, combine 'Street', 'City', 'State', and 'ZIP' columns into a single address string.

  select CONCAT_WS(', ',Street,City,State,ZIP) as address from Addresses


19.Change all occurrences of 'a' to 'e' in the string 'database management'.

  select replace('database management','a','e')


20.From a 'Products' table, write a query to replace all spaces in product names with underscores.

  select replace(productName,' ','_') as newProductName from Products


21.Create a string of 10 asterisks (*).

  select replicate('*',10) as asterisks


22.Write a query to pad all product codes in a 'Products' table to a length of 10 characters with leading zeros.

  update Products set ProductCode = Right( replicate( '0', 10 ) + ProductCode, 10 )


23.Insert the string 'New ' at the beginning of 'York City'.

   select stuff('York City',1,0,'New') as city

24.From an 'Emails' table, mask the username part of email addresses, showing only the first and last characters.

  select email, left(email,1) + 
    replicate('*',charindex('@',email)-3) + 
    SUBSTRING(email,CHARINDEX('@',email)-1,1) + 
    SUBSTRING(email,CHARINDEX('@',email),len(email)) 
    as maskedEmail from employees;

25.Convert the string 'sql server' to uppercase.
  
   select UPPER('sql server')


26.Write a query to convert all customer names in a 'Customers' table to uppercase.

    update Custumers set customerName=upper(customerName)
  

27.Convert the string 'SQL SERVER' to lowercase.

  select LOWER('SQL SERVER')


28.From a 'Products' table, write a query to convert all product descriptions to lowercase.

   update Products set productDesc=lower(productDesc)


29.Remove trailing spaces from the string 'SQL Server    '.

   select RTRIM('SQL server   ')


30.Write a query to remove trailing spaces from all email addresses in an 'Employees' table.

    update employees set email = RTRIM(email)


31.Remove leading spaces from the string '   SQL Server'.

  select LTRIM('   SQL Server');


32.From a 'Comments' table, write a query to remove leading spaces from all comment texts.

   update Comments set CommentText = LTRIM(CommentText)


33.Display the current date in the format 'dd-MM-yyyy'.

  select format(GETDATE(),'dd-MM-yy')


34.From an 'Orders' table with an 'OrderTotal' column, display the total as a currency with 2 decimal places.

  select FORMAT(OrderTotal, 'C2') from Orders;


35.Separate the string 'apple,banana,cherry' into individual fruits.

  select value AS Fruit FROM STRING_SPLIT('apple,banana,cherry', ',');

36.From a 'Skills' table with a 'SkillList' column containing comma-separated skills, write a query to create a row for each individual skill.

  select SkillID, value AS Skill from Skills CROSS APPLY STRING_SPLIT(SkillList, ',')


----------------------Date and Time Functions---------------------


37.Write a query to display the current date and time.
  
  select GETDATE() as DateTime


38.From an 'Orders' table, find all orders placed in the last 24 hours.

  select * from Orders where orderDate >= DATEADD(HOUR,-24,GETDATE())


39.Display the current UTC date and time.
  
  SELECT GETUTCDATE()


40.Write a query to show the time difference between local time and UTC time.

  select DATEDIFF(Hour,GETUTCDATE(),GETDATE())


41.Convert the current date and time to 'Pacific Standard Time'.

  select GETDATE() at time Zone 'Pacific Standard Time'


42.From a 'Flights' table with a 'DepartureTime' column in UTC, convert all departure times to 'Eastern Standard Time'.

  select DepartureTime AT TIME ZONE 'UTC' AT TIME ZONE 'Eastern Standard Time' from Flights;


43.Add 3 months to the current date.

  select DATEADD(month,3,getdate())

  
44.From an 'Employees' table, write a query to calculate each employee's retirement date (65 years from their 'DateOfBirth').

  select fullName,DATEADD(year,65,DateOfBirth) from employee


45.Calculate the number of days between '2023-01-01' and '2023-12-31'.

  select DATEDIFF(day,'2023-01-01','2023-12-31')


46.From an 'Orders' table, find the average number of days between order date and ship date.

  select AVG(DATEDIFF(DAY, OrderDate, ShipDate)) AS AvgDaysBetweenOrderAndShip from Orders;


47.Extract the month number from the date '2023-09-15'.
  
  SELECT MONTH('2023-09-15')

  
48.From a 'Sales' table, write a query to group total sales by the quarter of the sale date.
  
  SELECT DATEPART(QUARTER, SaleDate) AS Quarter, SUM(SaleAmount) AS TotalSales FROM Sales GROUP BY DATEPART(QUARTER, SaleDate);
  

49.Extract the year from the current date.

  select year(getdate())


50.From an 'Employees' table, find all employees hired in the year 2022.

  select * from employees where year(HireDate)=2025


51.Check if '2023-02-30' is a valid date.
   
  SELECT ISDATE('2023-02-30') AS IsValidDate;


52.Write a query to find all rows in a 'UserInputs' table where the 'EnteredDate' column contains invalid dates.

  SELECT * FROM UserInputs WHERE ISDATE(EnteredDate) = 0;


53.Find the last day of the current month.
  
  SELECT EOMONTH(GETDATE())


54.From a 'Subscriptions' table, write a query to extend all subscription end dates to the end of their respective months.

  update Subscriptions set endDate = EOMONTH(endDate)


55.Display the current date and time.

  select GETDATE();


56.Compare the results of two different methods to get the current timestamp - are they always the same?
  
  SELECT GETDATE() AS LocalTime,SYSDATETIME() AS SysDateTime;
  SysDateTime is more precise than GETDATE
   

57.Get the current date and time with higher precision than standard methods.

  SELECT SYSDATETIME()


58.Write a query to insert the current high-precision timestamp into a 'Logs' table.

  INSERT INTO Logs (LogTime) VALUES (SYSDATETIME());
  

59.Display the current UTC date and time with high precision.
  
  SELECT SYSUTCDATETIME()

  
60.Calculate the difference in microseconds between the current local time and UTC time.

  SELECT DATEDIFF_BIG(MICROSECOND, SYSUTCDATETIME(), SYSDATETIME())


61.Get the current date, time, and time zone offset.
  
   SELECT SYSDATETIMEOFFSET()


62.From a 'GlobalEvents' table, convert all event times to include time zone offset information.

  UPDATE GlobalEvents SET eventTime = TODATETIMEOFFSET(eventTime, DATEPART(TZOFFSET, SYSDATETIMEOFFSET()));


63.Extract the month number from the date '2023-12-25'.
  
  SELECT MONTH('2023-12-25')

  
64.From a 'Sales' table, find the total sales for each month of the previous year.
  
  SELECT MONTH(SaleDate) AS Month,
  SUM(SaleAmount) AS TotalSales FROM Sales
  WHERE YEAR(SaleDate) = YEAR(GETDATE()) - 1
  GROUP BY MONTH(SaleDate);


65.Extract the day of the month from '2023-03-15'.
   
   SELECT DAY('2023-03-15')
  

66.Write a query to find all orders from an 'Orders' table that were placed on the 15th day of any month.

  SELECT * FROM Orders WHERE DAY(OrderDate) = 15;
  

67.Get the name of the month for the date '2023-09-01'.

  SELECT DATENAME(MONTH, '2023-09-01')


68.From an 'Events' table, write a query to display the day of the week (in words) for each event date.

  SELECT DATENAME(WEEKDAY, eventDate) FROM Events;


69.Create a date for Christmas Day 2023.
   
  SELECT DATEFROMPARTS(2023, 12, 25) AS ChristmasDay;


70.Write a query to convert separate year, month, and day columns from a 'Dates' table into a single DATE column.

  SELECT DATEFROMPARTS(Year, Month, Day) AS FullDate FROM Dates;


--------------------------------------------------------------------------------------------------------------------------


Question 1: Find the total number of customers in each country.

 select Country,count(*) as Count from Customers group by Country


Question 2: Calculate the average unit price of products in each category.
 
 select Category,avg(UnitPrice) as Average from Products group by Category


Question 3: Find the maximum and minimum salary in each department.
 
 select Department,min(Salary) as Min_Salary , Max(Salary) as Max_Salary from employees group by Department


Question 4: Count the total number of products supplied by each supplier.

 select Supplier,count(*) as Number_Of_Products from Products group by Supplier


Question 5: Calculate the total value of inventory (UnitsInStock × UnitPrice) for each product category.

 select Category,sum(Unitprice*UnitsInStock) as Total_Value from Products group by Category


Question 6: Find all product categories that have more than 2 products.

 select Category, count(*) as count from Products group by Category having count(*) >2


Question 7: List departments where the average salary is greater than $60,000.
 
 select Department,avg(Salary) from Employees group by Department having avg(Salary) > 60000


Question 8: Show product categories where the average unit price is between $100 and $500.

 select Category,avg(UnitPrice) as avg_unitprice from Products group by Category having avg(UnitPrice) between 100 and 500


Question 9: Find suppliers who supply products worth more than $10,000 in total inventory value.

 select Supplier,sum(Unitprice*UnitsInStock) as Total_Value from Products group by Supplier having sum(Unitprice*UnitsInStock) >10000


Question 10: List countries that have more than 1 customer and show the customer count.

 select Country , count(*) as Customer_Count from Customers group by Country having count(*)>1